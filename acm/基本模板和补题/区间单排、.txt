#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
using namespace std;
const int MAXN=200+5;
int a[MAXN],b[MAXN];
int dp[MAXN][MAXN];
const int inf=1e9+7;
int main(){
    int T,n;
    scanf("%d",&T);
    int cas=1;
    while(T--){
        scanf("%d",&n);
        for(int i=1;i<=n;i++)
            scanf("%d",&a[i]);
        for(int i=1;i<=n;i++)
            scanf("%d",&b[i]);
        b[0]=0,b[n+1]=0;
        for(int i=1;i<=n;i++){
            for(int j=i;j<=n;j++)
                dp[i][j]=inf;
        }
        for(int len=1;len<=n;len++){
            for(int i=1;i<=n;i++){
                int j=i+len-1;
                for(int k=i;k<=j&&j<=n;k++){
                    dp[i][j]=min(dp[i][j],dp[i][k-1]+dp[k+1][j]+a[k]+b[i-1]+b[j+1]);
                }
            }
        }
        printf("Case #%d: %d\n",cas++,dp[1][n]);
    }
    return 0;
}













#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
using namespace std;
const int MAXN=200+5;
int a[MAXN],b[MAXN];
int dp[MAXN][MAXN];
const int inf=1e9+7;
int dfs(int l,int r){
    if(l>r)  return 0;
    if(dp[l][r]!=-1)  return dp[l][r];
    int ret=inf;
    for(int k=l;k<=r;k++)
        ret=min(ret,dfs(l,k-1)+dfs(k+1,r)+a[k]+b[l-1]+b[r+1]);
    dp[l][r]=ret;
    return ret;
}
int main(){
    int T,n;
    scanf("%d",&T);
    int cas=1;
    while(T--){
        scanf("%d",&n);
        for(int i=1;i<=n;i++)
            scanf("%d",&a[i]);
        for(int i=1;i<=n;i++)
            scanf("%d",&b[i]);
        b[0]=0,b[n+1]=0;
        memset(dp,-1,sizeof(dp));
       /* for(int i=1;i<=n;i++){
            for(int j=i;j<=n;j++)
                dp[i][j]=inf;
        }*/
        int ans=dfs(1,n);
        printf("Case #%d: %d\n",cas++,ans);
    }
    return 0;
}
